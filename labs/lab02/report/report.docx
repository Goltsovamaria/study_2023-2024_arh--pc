---
## Front matter
title: "Отчёт по лабораторной работе №2"
subtitle: "Дисциплина: Архитектура компьютера"
author: "Мария Данииловна Гольцова"

## Generic otions
lang: ru-RU
toc-title: "Содержание"

## Bibliography
bibliography: bib/cite.bib
csl: pandoc/csl/gost-r-7-0-5-2008-numeric.csl

## Pdf output format
toc: true # Table of contents
toc-depth: 2
lof: true # List of figures
lot: true # List of tables
fontsize: 12pt
linestretch: 1.5
papersize: a4
documentclass: scrreprt
## I18n polyglossia
polyglossia-lang:
  name: russian
  options:
	- spelling=modern
	- babelshorthands=true
polyglossia-otherlangs:
  name: english
## I18n babel
babel-lang: russian
babel-otherlangs: english
## Fonts
mainfont: PT Serif
romanfont: PT Serif
sansfont: PT Sans
monofont: PT Mono
mainfontoptions: Ligatures=TeX
romanfontoptions: Ligatures=TeX
sansfontoptions: Ligatures=TeX,Scale=MatchLowercase
monofontoptions: Scale=MatchLowercase,Scale=0.9
## Biblatex
biblatex: true
biblio-style: "gost-numeric"
biblatexoptions:
  - parentracker=true
  - backend=biber
  - hyperref=auto
  - language=auto
  - autolang=other*
  - citestyle=gost-numeric
## Pandoc-crossref LaTeX customization
figureTitle: "Рис."
tableTitle: "Таблица"
listingTitle: "Листинг"
lofTitle: "Список иллюстраций"
lotTitle: "Список таблиц"
lolTitle: "Листинги"
## Misc options
indent: true
header-includes:
  - \usepackage{indentfirst}
  - \usepackage{float} # keep figures where there are in the text
  - \floatplacement{figure}{H} # keep figures where there are in the text
---

# Цель работы

Изучить идеологию и применения средств контроля версий, а
также приобрести практические навыки по работе с системой git.


# Выполнение лабораторной работы

Создала учётную запись на сайте https://github.com/ и заполнила основные
данные (рис. @fig:001).

![Учётная запись](image1.jpg){#fig:001 width=70%}

Сначала сделала предварительную конфигурацию git. Открыла терминал и
ввела следующие команды, указав имя и email владельца репозитория (рис. @fig:002).

![Конфигурация](image2.jpg){#fig:002 width=70%}

Настроила utf-8 в выводе сообщений git (рис. @fig:003).

![utf-8](image3.jpg){#fig:003 width=70%}

Задала имя начальной ветки (master) (рис. @fig:004).

![Имя начальной ветки](image4.jpg){#fig:004 width=70%}

Параметр autocrlf (рис. @fig:005).

![autocrlf](image5.jpg){#fig:005 width=70%}

Параметр safecrlf (рис. @fig:006).

![safecrlf](image6.jpg){#fig:006 width=70%}

Для последующей идентификации пользователя на сервере репозиториев
сгенерировала пару ключей (приватный и открытый) (рис. @fig:007).

![Генерация ключей](image7.jpg){#fig:007 width=70%}

Зашла на сайт http: //github.org/ под своей учётной записью и перешла в меню.
После этого выбрала в боковом меню SSH and GPG keys и нажала кнопку New
SSH key. Скопировав из локальной консоли ключ в буфер обмена, вставила
ключ в появившееся на сайте поле и указала для ключа имя (Title) (рис. @fig:008).

![Ключ](image8.jpg){#fig:008 width=70%}

Открыла терминал и создала каталог для предмета "Архитектура компьютера" (рис. @fig:009).

![Переход в каталог](image9.jpg){#fig:009 width=70%}

Перешла на страницу репозитория с шаблоном курса https://github.com/yamadharma/cour se-directory-student-template. 
Далее выбрала Use this template.  В открывшемся окне задала имя репозитория
(Repository name) study_2023–2024_arhpc и создала репозиторий (рис. @fig:010).

![Создание репозитория](image10.jpg){#fig:010 width=70%}

Открыла терминал и перешла в каталог курса (рис. @fig:011).

![Переход в каталог](image11.jpg){#fig:011 width=70%}

Клонировала созданный репозиторий (рис. @fig:012).

![Клонирование репозитория](image12.jpg){#fig:012 width=70%}

Перешла в каталог курса и удалила лишние файлы (рис. @fig:013).

![Удаление файлов](image13.jpg){#fig:013 width=70%}

Создала необходимые каталоги (рис. @fig:014).

![Создание каталогов](image14.jpg){#fig:014 width=70%}

Отправила файлы на сервер (рис. @fig:015).

![Отправка на сервер](image15.jpg){#fig:015 width=70%}

Скопировала отчёты по выполнению лабораторной работы №1 в
соответствующий каталог созданного рабочего пространства (рис. @fig:016).

![Копирование отчёта №1](image16.jpg){#fig:016 width=70%}

# Контрольные вопросы для самопроверки

1. Система контроля версий — это программное обеспечение,
позволяющее управлять изменениями. Системы контроля версий
(Version Control System, VCS) применяются при работе нескольких
человек над одним проектом. Можно объединить (слить) изменения,
сделанные разными участниками (автоматически или вручную),
вручную выбрать нужную версию, отменить изменения вовсе или
заблокировать файлы для изменения. Системы контроля версий могут
поддерживать работу с несколькими версиями одного файла, сохраняя
общую историю изменений до точки ветвлений версий и собственные
истории изменений каждой ветви.
2. Репозиторий (repository) — специальное хранилище файлов и папок
проекта, изменения которых отслеживаются. В распоряжении
разработчика имеется «рабочая копия» (working copy) проекта, с
которой он непосредственно работает. Рабочую копию необходимо
периодически синхронизировать с репозиторием, эта операция
предполагает отправку в него изменений, которые пользователь внёс в
свою рабочую копию (такая операция называется commit) и
актуализацию рабочей копии, в процессе которой к пользователю
загружается последняя версия из репозитория (этот процесс назвается
update).
3. При использовании централизованной архитектуры VCS представляет
из себя серверное приложение. Центральный сервер непосредственно хранит 
файлы проекта и их историю, а клиентские приложения
запрашивают у сервера необходимые им версии интересующих их
файлов; все пользователи подключены к центральному владельцу сети
или сервера. Недостаток -необходимость наличия доступа к сети при
совершении операций с репозиторием. Децентрализованные VCS не
требуют доступа к серверу при совершении операций с репозиторием;
нет единого центрального владельца. Недостатки DVCS — большой
размер рабочей копии, сложности при обмене изменениями с другими
участниками. Пример централизованной системы — CVS. Пример
децентрализованной системы — Интернет.
4. Работа пользователя со своей веткой начинается с проверки и получения
изменений из центрального репозитория. Затем можно вносить
изменения в локальном дереве и (или) ветке. После завершения внесения
какого-то изменения в файлы и (или) каталоги проекта необходимо
разместить их в центральном репозитории.
5. Обновить проект, забрать последнюю версию из репозитория, внести
изменения в репозиторий, разрешить конфликты, создать бранч (ветку).
6. Git позволяет сохранять контрольные точки проекта и помогает
устранять конфликты.
7. git init — создание основного дерева репозитория; git pull — получение
обновлений; git push — отправка изменений в центральный
репозиторий; git status — просмотр списка изменённых файлов; git diff
— просмотр текущих изменений; git add - добавить все изменённые
и/или созданные файлы и/или каталоги; git rm — удалить файл и/или
каталог из индекса репозитория; git commit -am - сохранить все
добавленные изменения и все изменённые файлы; git checkout -b -
создание новой ветки, базирующейся на текущей; git checkout -
переключение на некоторую ветку; git push origin - отправка изменений
конкретной ветки в центральный репозиторий; git merge —no--ff -
слияние ветки с текущим деревом; git branch -d - удаление локальной
уже слитой с основным деревом ветки; git branch -D - принудительное
удаление локальной ветки.
8. Локальный репозиторий расположен непосредственно в памяти
компьютера разработчика, в нём происходит разработка и фиксаця
изменений, после чего можно отправить на удалённый репозиторий.
Удалённый репозиторий расположен на сервере, может быть приватным
— доступным ограниченному числу лиц, и публичным.

# Выводы

Я изучила идеологию и применение средств контроля версий, а
также приобрела практические навыки по работе с системой git.

# Список литературы{.unnumbered}

::: {#refs}
:::
